<theme-toggle>
  <button
    id="theme-toggle"
    class="theme-toggle"
    title="Toggle light & dark"
    aria-label="auto"
    aria-live="polite"
  >
    <svg
      class="sun-and-moon"
      aria-hidden="true"
      width="24"
      height="24"
      viewBox="0 0 24 24"
    >
      <circle
        class="sun"
        cx="12"
        cy="12"
        r="6"
        mask="url(#moon-mask)"
        fill="currentColor"></circle>
      <g class="sun-beams" stroke="currentColor">
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </g>
      <mask class="moon" id="moon-mask">
        <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
        <circle cx="24" cy="10" r="6" fill="black"></circle>
      </mask>
    </svg>
  </button>
</theme-toggle>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      // Toggle the theme on click
      this.addEventListener("click", () => {
        theme.value = theme.value === "light" ? "dark" : "light";
        setPreference();
      });
    }
  }

  customElements.define("theme-toggle", ThemeToggle);

  const storageKey = "theme-preference";

  const getPreference = () => {
    const storedTheme = localStorage.getItem(storageKey);
    if (storedTheme === "light" || storedTheme === "dark") {
      return { value: storedTheme };
    }

    // Default to system preference
    const systemPrefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    return { value: systemPrefersDark ? "dark" : "light" };
  };

  const setPreference = () => {
    localStorage.setItem(storageKey, theme.value);
    reflectPreference();
  };

  const reflectPreference = () => {
    const root = document.documentElement;
    root.setAttribute("data-theme", theme.value);

    const toggle = document.querySelector("#theme-toggle");
    if (toggle) {
      toggle.setAttribute("aria-label", theme.value);
    }
  };

  const theme = getPreference();

  // Reflect the theme immediately on script load
  reflectPreference();

  // Update theme dynamically based on system preference changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      theme.value = isDark ? "dark" : "light";
      setPreference();
    });

  // Reapply theme during client-side navigation (Astro specific)
  document.addEventListener("astro:page-load", () => {
    reflectPreference();
  });
</script>

<style>
  .theme-toggle {
    --icon-size: 2rem;
    inline-size: var(--icon-size);
    block-size: var(--icon-size);
    aspect-ratio: 1;
    border-radius: 50%;
    cursor: pointer;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    outline-offset: 5px;
  }

  .theme-toggle > svg {
    inline-size: 100%;
    block-size: 100%;
    stroke-linecap: round;
  }

  .sun-and-moon > .sun,
  .sun-and-moon > .sun-beams {
    transform-origin: center center;
    fill: var(--icon-fill);
  }

  .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill);
    stroke-width: 2px;
  }

  .theme-toggle:hover .sun,
  .theme-toggle:focus-visible .sun {
    fill: var(--icon-fill-hover);
  }

  .theme-toggle:hover .sun-beams,
  .theme-toggle:focus-visible .sun-beams {
    stroke: var(--icon-fill-hover);
  }
</style>

<style is:global>
  [data-theme="dark"] .theme-toggle .sun {
    transform: scale(1.75);
  }

  [data-theme="dark"] .theme-toggle .sun-beams {
    opacity: 0;
  }

  [data-theme="dark"] .theme-toggle .moon > circle {
    transform: translateX(-7px);
  }
</style>
